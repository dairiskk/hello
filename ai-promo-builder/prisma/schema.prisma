// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String        @id @default(cuid())
  email                  String        @unique
  passwordHash           String
  plan                   Plan          @default(FREE)
  publishedVariantCount  Int           @default(0)
  stripeCustomerId       String?       @unique
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  
  projects               Project[]
  subscriptions          Subscription[]
  
  @@map("users")
}

model Project {
  id        String   @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  brandKit  BrandKit?
  pages     Page[]
  
  @@map("projects")
}

model BrandKit {
  id              String  @id @default(cuid())
  projectId       String  @unique
  tokensBase      Json    // AI-generated base tokens
  tokensOverrides Json?   // User customizations
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  project         Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("brand_kits")
}

model Page {
  id                String      @id @default(cuid())
  projectId         String
  pageSpecBase      Json        // AI-generated base page spec
  pageSpecOverrides Json?       // User customizations
  status            PageStatus  @default(DRAFT)
  baseSlug          String      @unique
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  project           Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  variants          Variant[]
  
  @@map("pages")
}

model Variant {
  id            String    @id @default(cuid())
  pageId        String
  locale        String    @default("en")
  region        String    @default("US")
  slug          String    @unique
  i18nBase      Json      // AI-generated base i18n content
  i18nOverrides Json?     // User customizations
  published     Boolean   @default(false)
  publishedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  page          Page      @relation(fields: [pageId], references: [id], onDelete: Cascade)
  analytics     AnalyticsEvent[]
  
  @@unique([pageId, locale, region])
  @@map("variants")
}

model AnalyticsEvent {
  id        String      @id @default(cuid())
  variantId String
  event     EventType
  timestamp DateTime    @default(now())
  userAgent String?
  ipAddress String?
  referrer  String?
  
  variant   Variant     @relation(fields: [variantId], references: [id], onDelete: Cascade)
  
  @@index([variantId, timestamp])
  @@map("analytics_events")
}

model Subscription {
  id            String             @id @default(cuid())
  userId        String
  plan          Plan
  stripeSubId   String             @unique
  status        SubscriptionStatus
  periodStart   DateTime
  periodEnd     DateTime
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("subscriptions")
}

enum Plan {
  FREE
  PAID
  ULTIMATE
}

enum PageStatus {
  DRAFT
  GENERATING
  READY
  PUBLISHED
  ARCHIVED
}

enum EventType {
  VIEW
  CLICK
  CONVERSION
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  INCOMPLETE
}
